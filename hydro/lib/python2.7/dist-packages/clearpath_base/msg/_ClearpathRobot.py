"""autogenerated by genpy from clearpath_base/ClearpathRobot.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ClearpathRobot(genpy.Message):
  _md5sum = "1bdab2b789676c1b350ab6739da650c7"
  _type = "clearpath_base/ClearpathRobot"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string name
string model
int32 platform_revision
uint32 serial
int32[2] horizon_version
int32[2] firmware_version
int32 firmware_revision
string write_date

"""
  __slots__ = ['name','model','platform_revision','serial','horizon_version','firmware_version','firmware_revision','write_date']
  _slot_types = ['string','string','int32','uint32','int32[2]','int32[2]','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,model,platform_revision,serial,horizon_version,firmware_version,firmware_revision,write_date

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClearpathRobot, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.model is None:
        self.model = ''
      if self.platform_revision is None:
        self.platform_revision = 0
      if self.serial is None:
        self.serial = 0
      if self.horizon_version is None:
        self.horizon_version = [0,0]
      if self.firmware_version is None:
        self.firmware_version = [0,0]
      if self.firmware_revision is None:
        self.firmware_revision = 0
      if self.write_date is None:
        self.write_date = ''
    else:
      self.name = ''
      self.model = ''
      self.platform_revision = 0
      self.serial = 0
      self.horizon_version = [0,0]
      self.firmware_version = [0,0]
      self.firmware_revision = 0
      self.write_date = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iI.pack(_x.platform_revision, _x.serial))
      buff.write(_struct_2i.pack(*self.horizon_version))
      buff.write(_struct_2i.pack(*self.firmware_version))
      buff.write(_struct_i.pack(self.firmware_revision))
      _x = self.write_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model = str[start:end].decode('utf-8')
      else:
        self.model = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.platform_revision, _x.serial,) = _struct_iI.unpack(str[start:end])
      start = end
      end += 8
      self.horizon_version = _struct_2i.unpack(str[start:end])
      start = end
      end += 8
      self.firmware_version = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (self.firmware_revision,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.write_date = str[start:end].decode('utf-8')
      else:
        self.write_date = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iI.pack(_x.platform_revision, _x.serial))
      buff.write(self.horizon_version.tostring())
      buff.write(self.firmware_version.tostring())
      buff.write(_struct_i.pack(self.firmware_revision))
      _x = self.write_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model = str[start:end].decode('utf-8')
      else:
        self.model = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.platform_revision, _x.serial,) = _struct_iI.unpack(str[start:end])
      start = end
      end += 8
      self.horizon_version = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      self.firmware_version = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 4
      (self.firmware_revision,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.write_date = str[start:end].decode('utf-8')
      else:
        self.write_date = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iI = struct.Struct("<iI")
_struct_i = struct.Struct("<i")
_struct_2i = struct.Struct("<2i")
